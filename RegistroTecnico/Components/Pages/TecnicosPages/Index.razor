@page "/Tecnico/index"
@inject TecnicosService tecnicoService
@inject TiposTecnicosService tiposTecnicosService
@inject NavigationManager navigationManager

<PageTitle>Consulta Técnicos</PageTitle>

<EditForm Model="ListaTecnicos" class="border shadow-lg p-3 rounded">
    <div class="card-header bg-primary text-white text-center py-2 rounded">
        <h3 style="font-weight: bold;" class="mb-0 font-weight-bold">Consulta Técnicos</h3>
    </div>

    <div class="row mb-3 align-items-end">
        <div class="col-md-3">
            <label for="Filtro" class="form-label">Filtrar por:</label>
            <select @bind="filtro" class="form-select">
                <option value="id">ID</option>
                <option value="nombre">Nombre</option>
                <option value="tipo">Tipo técnico</option>
            </select>
        </div>
        <div class="col-md-6">
            <label for="ValorFiltro" class="form-label">Búsqueda:</label>
            <div class="input-group">
                <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                    <span class="bi bi-search"></span> Buscar
                </button>
            </div>
        </div>
    </div>

    <div class="card-body">
        <div class="row">
            <div class="col-md-9"></div>
            <div class="col-md-3 text-end">
                <a href="Tecnico/Create" class="btn btn-success" type="button">
                    <span class=""></span> Crear
                    <i class="bi bi-pencil-square"></i>
                </a>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered text-center">
            <thead class="bg-primary text-white">
                <tr>
                    <th>TécnicoId</th>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Tipo Técnico</th>
                    <th>SueldoHora</th>
                    <th>Detalle</th>
                    <th>Editar</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in ListaTecnicos)
                {
                    var tipo = TiposList.FirstOrDefault(tp => tp.TipoId == t.TipoId);
                    <tr>
                        <td>@t.TecnicoId</td>
                        <td>@t.Nombre</td>
                        <td>@t.Descripcion</td>
                        <td>@(tipo != null ? tipo.Descripcion : "nO ENCONTRADO") </td>
                        <td>@t.Sueldohora</td>
                        <td>
                            <a href="/Tecnico/Details/@t.TecnicoId" style="border: none; background-color: transparent;" class="btn-detalle">
                                <span class="bi bi-info-circle-fill" style="font-size: 2rem;"></span>
                            </a>
                        </td>
                        <td>
                            <a href="/Tecnico/Edit/@t.TecnicoId" style="border: none; background-color: transparent;" class="btn-editar">
                                <span class="bi bi-pencil-square" style="font-size: 2rem;"></span>
                            </a>
                        </td>
                        <td>
                            <a href="/Tecnico/Delete/@t.TecnicoId" style="border: none; background-color: transparent;" class="btn-eliminar">
                                <span class="bi bi-dash-circle-fill" style="font-size: 2rem;"></span>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="card-footer text-start">
        <p>Total de Técnicos: @ListaTecnicos.Count</p>
    </div>
</EditForm>

@code {
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    public List<Tipostecnicos> TiposList { get; set; } = new List<Tipostecnicos>();
    private string filtro = "id";
    private string valorFiltro;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TiposList = await tiposTecnicosService.Listar(tp => tp.TipoId > 0);
            ListaTecnicos = await tecnicoService.Listar(t => t.TecnicoId > 0);
        }
        catch (Exception ex)
        {
            // Manejo del error inicial
            Console.WriteLine($"Error initializing: {ex.Message}");
        }
    }

    private async Task Buscar()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(valorFiltro))
            {
                if (filtro == "id" && int.TryParse(valorFiltro, out int TecnicoId))
                {
                    ListaTecnicos = await tecnicoService.Listar(t => t.TecnicoId == TecnicoId);
                }
                else if (filtro == "nombre")
                {
                    ListaTecnicos = await tecnicoService.Listar(t => t.Nombre.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase));
                }
                else if (filtro == "tipo" && int.TryParse(valorFiltro, out int TipoId))
                {
                    ListaTecnicos = await tecnicoService.Listar(t => t.TipoId == TipoId);
                }
            }
            else
            {
                ListaTecnicos = await tecnicoService.Listar(p => true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en Buscar(): {ex.Message}");
            ListaTecnicos = new List<Tecnicos>();
        }
    }

    private void IrEliminar(int tecnicoId)
    {
        navigationManager.NavigateTo($"/Tecnico/Delete/");
    }
}